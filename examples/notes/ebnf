program       = module | module program ;
module        = "module" identifier "where" declarations definitions ;
declarations  = "from" module "=>" "[" identifiers "]" | ε ;
definitions    = definition | definition definitions ;
definition     = "let" identifier parameters "do:" expression | "let" identifier "be:" expression ;
parameters     = "|" identifiers "|" | ε ;
expression     = identifier | literal | function | application | conditional | match | binding ;
function       = "do" parameters expression | "do:" expression ;
application    = expression "(" expressions ")" ;
conditional    = "if" expression "then" expression "else" expression ;
match          = "match" expression "do" cases ;
cases          = case | case cases ;
case           = "when" pattern "then" expression ;
pattern        = literal | identifier | "(" patterns ")" ;
patterns       = pattern | pattern "," patterns ;
binding        = "let" identifiers "be:" expression ;
identifiers    = identifier | identifier "," identifiers ;
expressions    = expression | expression "," expressions ;
literal        = integer | float | string | boolean ;
